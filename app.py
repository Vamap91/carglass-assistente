import os
import logging
import traceback
import time
import uuid
import random
import re
from typing import Dict, Any, Optional, Tuple, List
from dataclasses import dataclass, asdict
from functools import wraps
import json
from collections import defaultdict
import hashlib

from flask import Flask, render_template, request, jsonify, session, abort # Importe 'abort' aqui
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from twilio.request_validator import RequestValidator
import bleach
from markupsafe import escape

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== CONFIGURA√á√ÉO =====
@dataclass
class Config:
    SECRET_KEY: str = os.getenv('SECRET_KEY', 'carglass-secreto-render-key')
    DEBUG: bool = os.getenv('DEBUG', 'False').lower() == 'true'
    OPENAI_API_KEY: str = os.getenv('OPENAI_API_KEY', '')
    OPENAI_MODEL: str = os.getenv('OPENAI_MODEL', 'gpt-4-turbo')
    CARGLASS_API_URL: str = os.getenv('CARGLASS_API_URL', 'http://10.10.100.240:3000/api/status')
    USE_REAL_API: bool = os.getenv('USE_REAL_API', 'true').lower() == 'true' # Corrigido aqui
    SESSION_TIMEOUT: int = int(os.getenv('SESSION_TIMEOUT', '1800'))
    CACHE_TTL: int = int(os.getenv('CACHE_TTL', '300'))
    
    # Configura√ß√µes Twilio
    TWILIO_ACCOUNT_SID: str = os.getenv('TWILIO_ACCOUNT_SID', '')
    TWILIO_AUTH_TOKEN: str = os.getenv('TWILIO_AUTH_TOKEN', '')
    TWILIO_WHATSAPP_NUMBER: str = os.getenv('TWILIO_WHATSAPP_NUMBER', 'whatsapp:+14155238886')
    TWILIO_ENABLED: bool = bool(os.getenv('TWILIO_ACCOUNT_SID'))

config = Config()

# ===== FLASK APP =====
app = Flask(__name__)
app.secret_key = config.SECRET_KEY

# ===== CONFIGURA√á√ÉO DE SEGURAN√áA PARA HML =====
# Rate Limiting (CR√çTICO mesmo em HML)
limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=["500 per day", "100 per hour"],  # Mais permissivo para testes
    storage_uri="memory://"
)

# ===== TWILIO WHATSAPP HANDLER =====
class TwilioWhatsAppHandler:
    def __init__(self):
        self.account_sid = config.TWILIO_ACCOUNT_SID
        self.auth_token = config.TWILIO_AUTH_TOKEN
        self.whatsapp_number = config.TWILIO_WHATSAPP_NUMBER
        self.client = None
        
        if self.account_sid and self.auth_token:
            try:
                from twilio.rest import Client
                from twilio.twiml.messaging_response import MessagingResponse
                self.client = Client(self.account_sid, self.auth_token)
                self.MessagingResponse = MessagingResponse
                logger.info("‚úÖ Twilio WhatsApp handler inicializado com sucesso")
            except ImportError:
                logger.error("‚ùå Biblioteca Twilio n√£o instalada. Execute: pip install twilio")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar Twilio: {e}")
        else:
            logger.warning("‚ö†Ô∏è Credenciais Twilio n√£o configuradas - WhatsApp desabilitado")
    
    def is_enabled(self) -> bool:
        """Verifica se o Twilio est√° configurado e habilitado"""
        return self.client is not None
    
    def send_message(self, to_number: str, message: str) -> bool:
        """
        Envia mensagem WhatsApp via Twilio
        
        Args:
            to_number: N√∫mero do destinat√°rio (formato: +5511987654321 ou 5511987654321)
            message: Texto da mensagem
            
        Returns:
            bool: True se enviou com sucesso, False caso contr√°rio
        """
        if not self.is_enabled():
            logger.error("Twilio n√£o est√° habilitado")
            return False
        
        try:
            # Formata n√∫mero para WhatsApp
            clean_number = re.sub(r'[^\d+]', '', to_number)
            if not clean_number.startswith('+'):
                if clean_number.startswith('55'):
                    clean_number = '+' + clean_number
                else:
                    clean_number = '+55' + clean_number
            
            whatsapp_to = f"whatsapp:{clean_number}"
            
            # Limita tamanho da mensagem (Twilio limit: 1600 chars)
            if len(message) > 1500:
                message = message[:1500] + "...\n\nüì± Continue no link:\nhttps://carglass-assistente.onrender.com"
            
            # Envia mensagem
            message_instance = self.client.messages.create(
                body=message,
                from_=self.whatsapp_number,
                to=whatsapp_to
            )
            
            logger.info(f"‚úÖ Mensagem Twilio enviada: {message_instance.sid} para {whatsapp_to}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem Twilio: {e}")
            return False
    
    def process_incoming_message(self, request_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Processa mensagem recebida do webhook Twilio
        
        Args:
            request_data: Dados do webhook Twilio (request.form ou dict)
            
        Returns:
            dict: Dados processados da mensagem ou None se erro
        """
        try:
            # Extrai dados da mensagem
            from_number = request_data.get('From', '').replace('whatsapp:', '').replace('+', '')
            message_body = request_data.get('Body', '').strip()
            message_sid = request_data.get('MessageSid', '')
            
            # Limpa n√∫mero (remove c√≥digo do pa√≠s se necess√°rio)
            if from_number.startswith('55') and len(from_number) > 11:
                from_number = from_number[2:]  # Remove +55
            
            logger.info(f"üì± WhatsApp recebido de {from_number[:4]}***: {message_body[:50]}...")
            
            return {
                'phone': from_number,
                'message': message_body,
                'message_id': message_sid,
                'platform': 'whatsapp',
                'raw_data': dict(request_data)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar mensagem WhatsApp: {e}")
            return None
    
    def create_twiml_response(self, message: str = None) -> str:
        """
        Cria resposta TwiML (opcional - para resposta imediata)
        
        Args:
            message: Mensagem de resposta (opcional)
            
        Returns:
            str: XML TwiML
        """
        if not self.is_enabled():
            return ""
        
        try:
            response = self.MessagingResponse()
            if message:
                response.message(message)
            return str(response)
        except:
            return ""

# Inst√¢ncia global do handler Twilio
twilio_handler = TwilioWhatsAppHandler()

# ===== GERENCIADOR DE SEGURAN√áA PARA HML =====
class HMLSecurityManager:
    """Vers√£o simplificada para homologa√ß√£o"""
    def __init__(self):
        self.request_counts = defaultdict(list)
        self.blocked_ips = set()
        
    def sanitize_input(self, text: str) -> str:
        """Sanitiza√ß√£o b√°sica - mais permissiva em HML"""
        if not text:
            return ""
        
        # Remove apenas scripts perigosos
        text = bleach.clean(text, tags=[], strip=True)
        text = escape(text)
        
        # Limita tamanho (mais generoso em HML)
        return text[:2000].strip()
    
    def log_request(self, ip: str, endpoint: str):
        """Log simples para monitoramento"""
        now = time.time()
        
        # Remove requests antigos (√∫ltima hora)
        cutoff = now - 3600
        self.request_counts[ip] = [
            (ep, t) for ep, t in self.request_counts[ip] 
            if t > cutoff
        ]
        
        # Adiciona novo request
        self.request_counts[ip].append((endpoint, now))
        
        # Bloqueia apenas abuso extremo (mais de 200 requests/hora)
        if len(self.request_counts[ip]) > 200:
            self.blocked_ips.add(ip)
            logger.warning(f"üö® IP bloqueado por abuso em HML: {ip}")
    
    def is_ip_blocked(self, ip: str) -> bool:
        return ip in self.blocked_ips
    
    def validate_twilio_webhook(self, request) -> bool:
        """CR√çTICO: Valida webhook mesmo em HML"""
        if not config.TWILIO_AUTH_TOKEN:
            logger.warning("‚ö†Ô∏è TWILIO_AUTH_TOKEN n√£o configurado")
            return True  # Permite em desenvolvimento local (CUIDADO: APENAS PARA DEV/TESTE)
        
        try:
            validator = RequestValidator(config.TWILIO_AUTH_TOKEN)
            signature = request.headers.get('X-Twilio-Signature', '')
            url = request.url
            
            if request.method == 'POST':
                return validator.validate(url, request.form, signature)
            else:
                return validator.validate(url, request.args, signature)
                
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o Twilio: {e}")
            return False

# Inst√¢ncia para HML
security_manager = HMLSecurityManager()

# ===== UTILIT√ÅRIOS =====
def get_current_time() -> str:
    return time.strftime("%H:%M")

def get_current_datetime() -> str:
    return time.strftime("%d/%m/%Y - %H:%M")

def sanitize_input(text: str) -> str:
    """Fun√ß√£o global de sanitiza√ß√£o"""
    return security_manager.sanitize_input(text)

def validate_cpf(cpf: str) -> bool:
    """Valida CPF com exce√ß√µes para CPFs de teste - CORRIGIDO"""
    if not cpf or len(cpf) != 11:
        logger.info(f"CPF inv√°lido - tamanho: {len(cpf) if cpf else 0}")
        return False
    
    # CPFs de teste sempre v√°lidos - EXPANS√ÉO DA LISTA
    test_cpfs = [
        "12345678900",  # Principal para testes
        "11938012431",  
        "98765432100",
        "11122233344",
        "33344455566",
        "44455566677",
        "55566677788",
        "77788899900",
        "22233344455"
    ]
    
    if cpf in test_cpfs:
        logger.info(f"CPF de teste v√°lido: {cpf[:3]}***")
        return True
    
    # Verifica se todos os d√≠gitos s√£o iguais
    if cpf == cpf[0] * 11:
        logger.info(f"CPF inv√°lido - d√≠gitos iguais: {cpf}")
        return False
    
    # Valida√ß√£o matem√°tica normal
    try:
        soma = sum(int(cpf[i]) * (10 - i) for i in range(9))
        resto = soma % 11
        digito1 = 0 if resto < 2 else 11 - resto
        
        if int(cpf[9]) != digito1:
            logger.info(f"CPF inv√°lido - primeiro d√≠gito: {cpf}")
            return False
        
        soma = sum(int(cpf[i]) * (11 - i) for i in range(10))
        resto = soma % 11
        digito2 = 0 if resto < 2 else 11 - resto
        
        is_valid = int(cpf[10]) == digito2
        logger.info(f"CPF {'v√°lido' if is_valid else 'inv√°lido'}: {cpf[:3]}***")
        return is_valid
    except Exception as e:
        logger.error(f"Erro na valida√ß√£o CPF {cpf}: {e}")
        return False

def detect_identifier_type(text: str) -> Tuple[Optional[str], str]:
    """Detecta tipo de identificador - CORRIGIDO"""
    if not text:
        return None, ""
    
    clean_text = re.sub(r'[^a-zA-Z0-9]', '', text.strip())
    logger.info(f"üîç Detectando tipo para: '{clean_text}' (original: '{text}')")
    
    # Verifica CPF primeiro (11 d√≠gitos)
    if re.match(r'^\d{11}$', clean_text):
        logger.info(f"Poss√≠vel CPF detectado: {clean_text}")
        if validate_cpf(clean_text):
            logger.info(f"‚úÖ CPF v√°lido confirmado: {clean_text[:3]}***")
            return "cpf", clean_text
        else:
            logger.info(f"‚ùå CPF inv√°lido: {clean_text}")
            return None, clean_text
    
    # Verifica telefone (10 ou 11 d√≠gitos)
    elif re.match(r'^\d{10,11}$', clean_text):
        logger.info(f"Telefone detectado: {clean_text[:4]}***")
        return "telefone", clean_text
    
    # Verifica placa
    elif re.match(r'^[A-Za-z]{3}\d{4}$', clean_text) or re.match(r'^[A-Za-z]{3}\d[A-Za-z]\d{2}$', clean_text):
        logger.info(f"Placa detectada: {clean_text}")
        return "placa", clean_text.upper()
    
    # Verifica ordem de servi√ßo
    elif re.match(r'^\d{1,8}$', clean_text):
        logger.info(f"Ordem detectada: {clean_text}")
        return "ordem", clean_text
    
    logger.info(f"‚ùå Nenhum tipo identificado para: {clean_text}")
    return None, clean_text

def format_for_whatsapp(html_content: str) -> str:
    """
    Converte resposta HTML para formato WhatsApp
    
    Args:
        html_content: Conte√∫do com HTML tags
        
    Returns:
        str: Texto formatado para WhatsApp
    """
    text = html_content
    
    # Converte HTML para markdown WhatsApp
    text = re.sub(r'<strong>(.*?)</strong>', r'*\1*', text)  # Bold
    text = re.sub(r'<b>(.*?)</b>', r'*\1*', text)  # Bold
    text = re.sub(r'<em>(.*?)</em>', r'_\1_', text)  # Italic
    text = re.sub(r'<i>(.*?)</i>', r'_\1_', text)  # Italic
    
    # Remove componentes espec√≠ficos do HTML
    text = re.sub(r'<div class="status-progress-container">.*?</div>', '', text, flags=re.DOTALL)
    text = re.sub(r'<div class="timeline-.*?</div>', '', text, flags=re.DOTALL)
    text = re.sub(r'<span class="status-tag.*?</span>', lambda m: re.sub(r'<.*?>', '', m.group()), text)
    
    # Remove outras tags HTML
    text = re.sub(r'<[^>]+>', '', text)
    
    # Converte entidades HTML
    text = text.replace('&amp;', '&')
    text = text.replace('&lt;', '<')
    text = text.replace('&gt;', '>')
    text = text.replace('&nbsp;', ' ')
    
    # Limita tamanho (WhatsApp limit: 4096 chars, mas Twilio √© menor)
    if len(text) > 1400:
        text = text[:1400] + "...\n\nüì± Para mais detalhes:\nhttps://carglass-assistente.onrender.com"
    
    # Remove espa√ßos extras e quebras de linha excessivas
    text = re.sub(r'\n{3,}', '\n\n', text)
    text = re.sub(r' {2,}', ' ', text)
    text = text.strip()
    
    return text

# ===== CACHE EM MEM√ìRIA =====
class MemoryCache:
    def __init__(self):
        self.cache = {}
        self.max_items = 1000
    
    def get(self, key: str) -> Any:
        item = self.cache.get(key)
        if item and item['expires'] > time.time():
            return item['value']
        elif item:
            del self.cache[key]
        return None
    
    def set(self, key: str, value: Any, ttl: int = 300):
        if len(self.cache) >= self.max_items:
            # Remove 20% dos itens mais antigos
            old_keys = list(self.cache.keys())[:int(self.max_items * 0.2)]
            for old_key in old_keys:
                del self.cache[old_key]
        
        self.cache[key] = {
            'value': value,
            'expires': time.time() + ttl
        }
    
    def delete(self, key: str):
        if key in self.cache:
            del self.cache[key]
    
    def cleanup_expired(self):
        """Remove itens expirados do cache"""
        current_time = time.time()
        expired_keys = [key for key, item in self.cache.items() if item['expires'] <= current_time]
        for key in expired_keys:
            del self.cache[key]
        if expired_keys:
            logger.info(f"Cache cleanup: removidos {len(expired_keys)} itens expirados")

cache = MemoryCache()

# ===== SESS√ïES =====
@dataclass
class SessionData:
    session_id: str
    created_at: float
    last_activity: float
    client_identified: bool
    client_info: Optional[Dict[str, Any]]
    messages: List[Dict[str, Any]]
    platform: str = "web"  # "web" ou "whatsapp"
    phone_number: Optional[str] = None  # Para sess√µes WhatsApp
    
    def is_expired(self) -> bool:
        return (time.time() - self.last_activity) > config.SESSION_TIMEOUT
    
    def update_activity(self):
        self.last_activity = time.time()
    
    def add_message(self, role: str, content: str):
        message = {
            "role": role,
            "content": content,
            "time": get_current_time(),
            "platform": self.platform
        }
        self.messages.append(message)
        self.update_activity()
    
    def to_dict(self) -> Dict[str, Any]:
        """Converte SessionData para dicion√°rio"""
        return {
            "session_id": self.session_id,
            "created_at": self.created_at,
            "last_activity": self.last_activity,
            "client_identified": self.client_identified,
            "client_info": self.client_info,
            "messages": self.messages,
            "platform": self.platform,
            "phone_number": self.phone_number
        }

class SessionManager:
    def __init__(self):
        self.sessions = {}
        self.whatsapp_sessions = {}  # phone_number -> session_id
    
    def create_session(self, platform: str = "web", phone_number: str = None) -> SessionData:
        session_id = str(uuid.uuid4())
        current_time = time.time()
        
        session_data = SessionData(
            session_id=session_id,
            created_at=current_time,
            last_activity=current_time,
            client_identified=False,
            client_info=None,
            messages=[],
            platform=platform,
            phone_number=phone_number
        )
        
        # Mensagem de boas-vindas personalizada por plataforma
        if platform == "whatsapp":
            welcome_msg = "üëã Ol√°! Sou Clara, assistente virtual da CarGlass.\n\nDigite seu CPF, telefone ou placa do ve√≠culo para consultar seu atendimento."
        else:
            welcome_msg = "Ol√°! Sou Clara, sua assistente virtual da CarGlass. Digite seu CPF, telefone ou placa do ve√≠culo para come√ßarmos."
        
        session_data.add_message("assistant", welcome_msg)
        
        self.sessions[session_id] = session_data
        
        # Para WhatsApp, mapeia telefone -> session_id
        if platform == "whatsapp" and phone_number:
            self.whatsapp_sessions[phone_number] = session_id
        
        self._cleanup_expired()
        logger.info(f"Sess√£o criada: {session_id[:8]}*** - Plataforma: {platform}")
        return session_data
    
    def get_session(self, session_id: str) -> Optional[SessionData]:
        if not session_id:
            return None
        
        session_data = self.sessions.get(session_id)
        if session_data and not session_data.is_expired():
            session_data.update_activity()
            return session_data
        elif session_data:
            logger.info(f"Sess√£o expirada removida: {session_id[:8]}***")
            self._remove_session(session_id)
        
        return None
    
    def get_whatsapp_session(self, phone_number: str) -> Optional[SessionData]:
        """Recupera ou cria sess√£o WhatsApp baseada no telefone"""
        if not phone_number:
            return None
        
        session_id = self.whatsapp_sessions.get(phone_number)
        if session_id:
            session_data = self.get_session(session_id)
            if session_data:
                return session_data
            else:
                # Session expirou, remove mapeamento
                del self.whatsapp_sessions[phone_number]
                logger.info(f"Mapeamento WhatsApp removido: {phone_number[:4]}***")
        
        # Cria nova sess√£o WhatsApp
        return self.create_session("whatsapp", phone_number)
    
    def _remove_session(self, session_id: str):
        """Remove sess√£o e limpeza dos mapeamentos"""
        if session_id in self.sessions:
            session_data = self.sessions[session_id]
            if session_data.phone_number and session_data.phone_number in self.whatsapp_sessions:
                del self.whatsapp_sessions[session_data.phone_number]
            del self.sessions[session_id]
            logger.info(f"Sess√£o removida: {session_id[:8]}***")
    
    def _cleanup_expired(self):
        current_time = time.time()
        expired = [sid for sid, data in self.sessions.items()  
                    if current_time - data.last_activity > config.SESSION_TIMEOUT]
        for sid in expired:
            self._remove_session(sid)
        if expired:
            logger.info(f"Limpeza de sess√µes: {len(expired)} sess√µes expiradas removidas")
    
    def get_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas das sess√µes"""
        total = len(self.sessions)
        web_sessions = len([s for s in self.sessions.values() if s.platform == "web"])
        whatsapp_sessions = len([s for s in self.sessions.values() if s.platform == "whatsapp"])
        identified = len([s for s in self.sessions.values() if s.client_identified])
        
        return {
            "total": total,
            "web": web_sessions,
            "whatsapp": whatsapp_sessions,
            "identified": identified,
            "unidentified": total - identified
        }

session_manager = SessionManager()

# ===== API CLIENT =====
def get_client_data(tipo: str, valor: str) -> Dict[str, Any]:
    cache_key = f"client:{tipo}:{valor}"
    cached_result = cache.get(cache_key)
    if cached_result:
        logger.info(f"Cache hit para {tipo}: {valor[:4]}***")
        return cached_result
    
    if config.USE_REAL_API:
        import requests
        try:
            # URLs espec√≠ficas para cada tipo de consulta
            api_urls = {
                "cpf": "http://fusion-hml.carglass.hml.local:3000/api/status/cpf/",
                "telefone": "http://fusion-hml.carglass.hml.local:3000/api/status/telefone/",
                "ordem": "http://fusion-hml.carglass.hml.local:3000/api/status/ordem/"
            }
            
            # Verifica se o tipo √© suportado
            if tipo not in api_urls:
                logger.warning(f"Tipo '{tipo}' n√£o suportado pelas APIs")
                return {"sucesso": False, "mensagem": f"Tipo '{tipo}' n√£o suportado"}
            
            # Monta URL completa
            endpoint = f"{api_urls[tipo]}{valor}"
            logger.info(f"Consultando API CarGlass: {endpoint}")
            
            # Faz requisi√ß√£o
            response = requests.get(endpoint, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"API CarGlass - Sucesso: {data.get('sucesso')}")
                cache.set(cache_key, data, config.CACHE_TTL)
                return data
            else:
                logger.error(f"API CarGlass - Status: {response.status_code}")
                
        except requests.exceptions.ConnectionError as e:
            logger.warning(f"API CarGlass indispon√≠vel: {e}. Usando fallback.")
        except requests.exceptions.Timeout as e:
            logger.warning(f"API CarGlass timeout: {e}. Usando fallback.")
        except Exception as e:
            logger.error(f"Erro na API CarGlass: {e}")
    
    # Fallback para dados mockados
    logger.info("Usando dados mockados como fallback")
    mock_data = get_mock_data(tipo, valor)
    cache.set(cache_key, mock_data, config.CACHE_TTL)
    return mock_data

def get_mock_data(tipo: str, valor: str) -> Dict[str, Any]:
    """Dados mockados completos para testes"""
    mock_database = {
        "12345678900": {
            "sucesso": True,
            "dados": {
                "nome": "Carlos Silva",
                "cpf": "12345678900",
                "telefone": "11987654321",
                "ordem": "ORD12345",
                "status": "Em andamento",
                "tipo_servico": "Troca de Parabrisa",
                "veiculo": {"modelo": "Honda Civic", "placa": "ABC1234", "ano": "2022"},
                "loja": "CarGlass Morumbi",
                "endereco_loja": "Av. Professor Francisco Morato, 2307 - Butant√£",
                "previsao_conclusao": "hoje √†s 16h"
            }
        },
        "98765432100": {
            "sucesso": True,
            "dados": {
                "nome": "Maria Santos",
                "cpf": "98765432100",
                "telefone": "11976543210",
                "ordem": "ORD67890",
                "status": "Servi√ßo agendado com sucesso",
                "tipo_servico": "Reparo de Trinca",
                "veiculo": {"modelo": "Toyota Corolla", "placa": "DEF5678", "ano": "2021"},
                "loja": "CarGlass Vila Mariana",
                "endereco_loja": "Rua Domingos de Morais, 1267 - Vila Mariana",
                "previsao_conclusao": "amanh√£ √†s 14h"
            }
        },
        "11122233344": {
            "sucesso": True,
            "dados": {
                "nome": "Jo√£o Oliveira",
                "cpf": "11122233344",
                "telefone": "11955556666",
                "ordem": "ORD54321",
                "status": "Aguardando fotos para libera√ß√£o da ordem",
                "tipo_servico": "Troca de Vidro Lateral",
                "veiculo": {"modelo": "Volkswagen Golf", "placa": "GHI9012", "ano": "2023"},
                "loja": "CarGlass Santo Andr√©",
                "endereco_loja": "Av. Industrial, 600 - Santo Andr√©"
            }
        },
        "33344455566": {
            "sucesso": True,
            "dados": {
                "nome": "Ana Costa",
                "cpf": "33344455566",
                "telefone": "11944443333",
                "ordem": "ORD98765",
                "status": "Conclu√≠do",
                "tipo_servico": "Calibra√ß√£o ADAS",
                "veiculo": {"modelo": "BMW X3", "placa": "JKL3456", "ano": "2024"},
                "loja": "CarGlass Morumbi",
                "endereco_loja": "Av. Professor Francisco Morato, 2307 - Butant√£"
            }
        },
        "44455566677": {
            "sucesso": True,
            "dados": {
                "nome": "Pedro Mendes",
                "cpf": "44455566677",
                "telefone": "11933332222",
                "ordem": "ORD24680",
                "status": "Fotos Recebidas",
                "tipo_servico": "Calibra√ß√£o ADAS",
                "veiculo": {"modelo": "Jeep Compass", "placa": "MNO7890", "ano": "2023"},
                "loja": "CarGlass Morumbi",
                "endereco_loja": "Av. Professor Francisco Morato, 2307 - Butant√£"
            }
        },
        "55566677788": {
            "sucesso": True,
            "dados": {
                "nome": "Paulo Mendes",
                "cpf": "55566677788",
                "telefone": "11911110000",
                "ordem": "ORD36925",
                "status": "Ordem de Servi√ßo Aberta",
                "tipo_servico": "Reparo de Parabrisa",
                "veiculo": {"modelo": "Chevrolet Onix", "placa": "STU5678", "ano": "2021"},
                "loja": "CarGlass Vila Mariana",
                "endereco_loja": "Rua Domingos de Morais, 1267 - Vila Mariana"
            }
        },
        "77788899900": {
            "sucesso": True,
            "dados": {
                "nome": "Roberto Santos",
                "cpf": "77788899900",
                "telefone": "11933332222",
                "ordem": "ORD24680",
                "status": "Pe√ßa Identificada",
                "tipo_servico": "Calibra√ß√£o ADAS",
                "veiculo": {"modelo": "Jeep Compass", "placa": "MNO7890", "ano": "2023"},
                "loja": "CarGlass Santo Andr√©",
                "endereco_loja": "Av. Industrial, 600 - Santo Andr√©"
            }
        },
        "22233344455": {
            "sucesso": True,
            "dados": {
                "nome": "Fernanda Lima",
                "cpf": "22233344455",
                "telefone": "11922221111",
                "ordem": "ORD13579",
                "status": "Ordem de Servi√ßo Liberada",
                "tipo_servico": "Polimento de Far√≥is",
                "veiculo": {"modelo": "Hyundai HB20", "placa": "PQR1234", "ano": "2022"},
                "loja": "CarGlass Morumbi",
                "endereco_loja": "Av. Professor Francisco Morato, 2307 - Butant√£"
            }
        }
    }
    
    # Mapeamentos completos
    ordem_para_cpf = {
        "123456": "12345678900",  
        "ORD12345": "12345678900",
        "ORD67890": "98765432100",
        "ORD54321": "11122233344",
        "ORD98765": "33344455566",
        "ORD24680": "44455566677",
        "ORD36925": "55566677788",
        "ORD13579": "22233344455"
    }
    telefone_para_cpf = {
        "11987654321": "12345678900",
        "11976543210": "98765432100",
        "11955556666": "11122233344",
        "11944443333": "33344455566",
        "11933332222": "44455566677",
        "11911110000": "55566677788",
        "11922221111": "22233344455"
    }
    placa_para_cpf = {
        "ABC1234": "12345678900",
        "DEF5678": "98765432100",
        "GHI9012": "11122233344",
        "JKL3456": "33344455566",
        "MNO7890": "44455566677",
        "STU5678": "55566677788",
        "PQR1234": "22233344455"
    }
    
    cpf_key = None
    if tipo == "cpf" and valor in mock_database:
        cpf_key = valor
    elif tipo == "ordem" and valor in ordem_para_cpf:
        cpf_key = ordem_para_cpf[valor]
    elif tipo == "telefone" and valor in telefone_para_cpf:
        cpf_key = telefone_para_cpf[valor]
    elif tipo == "placa" and valor in placa_para_cpf:
        cpf_key = placa_para_cpf[valor]
    
    if cpf_key:
        logger.info(f"‚úÖ Dados encontrados para {tipo}: {valor}")
        return mock_database[cpf_key]
    
    logger.info(f"‚ùå Cliente n√£o encontrado para {tipo}: {valor}")
    return {"sucesso": False, "mensagem": f"Cliente n√£o encontrado para {tipo}"}

# ===== BARRA DE PROGRESSO =====
def get_progress_bar_html(client_data: Dict[str, Any]) -> str:
    """Gera HTML da barra de progresso baseado no status do cliente"""
    status = client_data['dados']['status']
    current_time = get_current_datetime()
    
    steps = [
        {"label": "Ordem Aberta", "state": "pending"},
        {"label": "Aguardando Fotos", "state": "pending"},
        {"label": "Pe√ßa Identificada", "state": "pending"},
        {"label": "Agendado", "state": "pending"},
        {"label": "Execu√ß√£o", "state": "pending"},
        {"label": "Inspe√ß√£o", "state": "pending"},
        {"label": "Conclu√≠do", "state": "pending"}
    ]
    
    status_mapping = {
        "Ordem de Servi√ßo Aberta": (0, "0%", "aberta"),
        "Aguardando fotos para libera√ß√£o da ordem": (1, "14%", "aguardando"),
        "Fotos Recebidas": (1, "28%", "recebidas"),
        "Pe√ßa Identificada": (2, "42%", "identificada"),
        "Ordem de Servi√ßo Liberada": (3, "57%", "liberada"),
        "Servi√ßo agendado com sucesso": (3, "57%", "agendado"),
        "Em andamento": (4, "71%", "andamento"),
        "Conclu√≠do": (6, "100%", "concluido")
    }
    
    active_step, progress_percentage, status_class = status_mapping.get(status, (0, "0%", "desconhecido"))
    
    # Configura estados das etapas
    for i, step in enumerate(steps):
        if i < active_step:
            step["state"] = "completed"
        elif i == active_step:
            step["state"] = "active"
        elif i == active_step + 1 and active_step < len(steps) - 1:
            step["state"] = "next"
    
    # Gera HTML
    steps_html = ""
    for step in steps:
        state = step["state"]
        next_highlight = '<div class="step-highlight">Pr√≥xima etapa</div>' if state == "next" else ''
        steps_html += f'''
        <div class="timeline-step {state}">
            <div class="step-node"></div>
            <div class="step-label">{step["label"]}</div>
            {next_highlight}
        </div>
        '''
    
    return f'''
    <div class="status-progress-container">
        <div class="status-current">
            <span class="status-tag {status_class}">{status}</span>
            <span class="status-date">{current_time}</span>
        </div>
        <div class="progress-timeline">
            <div class="timeline-track" style="--progress-width: {progress_percentage};">
                {steps_html}
            </div>
        </div>
    </div>
    '''

def get_whatsapp_status_text(client_data: Dict[str, Any]) -> str:
    """Vers√£o simplificada do status para WhatsApp"""
    status = client_data['dados']['status']
    
    # Mapeia status para emojis e texto simples
    status_emoji = {
        "Ordem de Servi√ßo Aberta": "üìã",
        "Aguardando fotos para libera√ß√£o da ordem": "üì∑",
        "Fotos Recebidas": "‚úÖ",
        "Pe√ßa Identificada": "üîç",
        "Ordem de Servi√ßo Liberada": "‚úÖ",
        "Servi√ßo agendado com sucesso": "üìÖ",
        "Em andamento": "üîß",
        "Conclu√≠do": "‚úÖ"
    }
    
    emoji = status_emoji.get(status, "üìã")
    
    # Cria timeline simplificada para WhatsApp
    timeline_text = f"""
üìä Timeline:
{"‚úÖ" if status != "Ordem de Servi√ßo Aberta" else "üîÑ"} Ordem Aberta
{"‚úÖ" if status not in ["Ordem de Servi√ßo Aberta", "Aguardando fotos para libera√ß√£o da ordem"] else "‚è≥"} Fotos/Pe√ßa
{"‚úÖ" if status in ["Em andamento", "Conclu√≠do"] else "‚è≥"} Agendado
{"‚úÖ" if status == "Conclu√≠do" else "üîÑ" if status == "Em andamento" else "‚è≥"} Execu√ß√£o
{"‚úÖ" if status == "Conclu√≠do" else "‚è≥"} Conclu√≠do
"""
    
    return f"{emoji} {status}\n\n{timeline_text}"

# ===== AI SERVICE =====
def get_ai_response(pergunta: str, cliente_info: Dict[str, Any], platform: str = "web") -> str:
    """Processa perguntas do cliente usando IA ou respostas predefinidas"""
    pergunta_lower = pergunta.lower()
    nome = cliente_info.get('dados', {}).get('nome', 'Cliente')
    
    # Log da pergunta
    logger.info(f"Processando pergunta ({platform}): {pergunta[:50]}...")
    
    # Comandos especiais para WhatsApp
    if platform == "whatsapp":
        if pergunta_lower in ['status', 'situacao', 'situa√ß√£o']:
            dados = cliente_info.get('dados', {})
            status_text = get_whatsapp_status_text(cliente_info)
            return f"Status atual do seu atendimento:\n\n{status_text}"
        
        if pergunta_lower in ['ajuda', 'help', 'menu', 'opcoes', 'op√ß√µes']:
            return """
ü§ñ Comandos dispon√≠veis:

üìã status - Ver situa√ß√£o atual
üè™ lojas - Lojas pr√≥ximas  
üõ°Ô∏è garantia - Info de garantia
üë• atendente - Falar com pessoa
üîÑ reiniciar - Nova consulta

üí¨ Ou envie sua pergunta!
"""
        
        if pergunta_lower in ['reiniciar', 'reset', 'nova consulta', 'recome√ßar']:
            return "üîÑ Consulta reiniciada!\n\nDigite seu CPF, telefone ou placa do ve√≠culo para nova consulta."
    
    # Detecta quando cliente n√£o entende ou est√° frustrado
    if any(keyword in pergunta_lower for keyword in ['n√£o entende', 'n√£o entendo', 'confuso', 'n√£o sei', 'help', 'ajuda']):
        if platform == "whatsapp":
            return f"""
Entendo sua d√∫vida, {nome}! üòä

Sou a Clara, assistente virtual da CarGlass. Estou aqui para te ajudar com informa√ß√µes sobre seu atendimento.

üìû Se preferir falar com nossa equipe humana:
0800-701-9495

üí¨ Ou me diga: o que voc√™ gostaria de saber?
"""
        else:
            return f"""
Entendo sua d√∫vida, {nome}!

Sou a Clara, assistente virtual da CarGlass. Estou aqui para te ajudar com informa√ß√µes sobre seu atendimento.

üìû Se preferir falar com nossa equipe: 0800-701-9495

üí¨ Ou me diga: o que voc√™ gostaria de saber?
"""
    
    # CORRE√á√ÉO: Pol√≠tica de lojas mais restritiva e espec√≠fica
    if any(keyword in pergunta_lower for keyword in ['loja', 'local', 'onde', 'endere√ßo', 'trocar de loja', 'mudar local', 'mudar loja', 'troca de loja']):
        # SEMPRE orienta para central quando menciona trocar/mudar
        if any(keyword in pergunta_lower for keyword in ['trocar', 'mudar', 'alterar', 'escolher', 'troca']):
            logger.info(f"Cliente solicitou troca de loja - orientando para central")
            if platform == "whatsapp":
                return f"""
üè™ Para trocar de loja √© necess√°rio consultar as lojas previamente.

Por favor, {nome}, entre em contato com nossa central de atendimento:

üìû 0800-701-9495

Eles v√£o te ajudar a escolher a melhor loja para voc√™! üòä
"""
            else:
                return f"""
üè™ Para trocar de loja √© necess√°rio consultar as lojas previamente.

Por favor, {nome}, entre em contato com nossa central de atendimento:

üìû 0800-701-9495

Eles v√£o te ajudar a escolher a melhor loja para voc√™!
"""
        # Apenas para consulta informativa espec√≠fica (sem inten√ß√£o de trocar)
        elif any(keyword in pergunta_lower for keyword in ['onde fica', 'quais s√£o', 'informa√ß√£o sobre lojas', 'conhecer as lojas']):
            logger.info(f"Cliente solicitou informa√ß√µes sobre lojas - fornecendo lista")
            if platform == "whatsapp":
                return """
üè™ Lojas CarGlass pr√≥ximas:

üìç CarGlass Morumbi
Av. Professor Francisco Morato, 2307
Butant√£ - S√£o Paulo

üìç CarGlass Vila Mariana  
Rua Domingos de Morais, 1267
Vila Mariana - S√£o Paulo

üìç CarGlass Santo Andr√©
Av. Industrial, 600
Santo Andr√©

üìû Para escolher sua loja: 0800-701-9495
"""
            else:
                return """
üè™ Lojas CarGlass pr√≥ximas:

‚Ä¢ CarGlass Morumbi: Av. Professor Francisco Morato, 2307 - Butant√£
‚Ä¢ CarGlass Vila Mariana: Rua Domingos de Morais, 1267 - Vila Mariana
‚Ä¢ CarGlass Santo Andr√©: Av. Industrial, 600 - Santo Andr√©

üìû Para escolher sua loja: 0800-701-9495
"""
        else:
            # Qualquer outra men√ß√£o de loja = orientar para central
            logger.info(f"Cliente mencionou loja - orientando para central por seguran√ßa")
            if platform == "whatsapp":
                return f"""
üè™ Para informa√ß√µes sobre lojas, entre em contato com nossa central:

üìû 0800-701-9495

Nossa equipe vai te ajudar com todas as informa√ß√µes! üòä
"""
            else:
                return f"""
üè™ Para informa√ß√µes sobre lojas, entre em contato com nossa central:

üìû 0800-701-9495

Nossa equipe vai te ajudar com todas as informa√ß√µes!
"""
    
    # Perguntas sobre garantia
    if any(keyword in pergunta_lower for keyword in ['garantia', 'seguro']):
        tipo_servico = cliente_info.get('dados', {}).get('tipo_servico', 'seu servi√ßo')
        if platform == "whatsapp":
            return f"""
üõ°Ô∏è Garantia CarGlass para {tipo_servico}:

‚úÖ 12 meses a partir da conclus√£o
‚úÖ Cobre defeitos de instala√ß√£o  
‚úÖ V√°lida em qualquer unidade

üìû Central: 0800-701-9495
"""
        else:
            return f"""
üõ°Ô∏è Garantia CarGlass para {tipo_servico}:

‚úÖ 12 meses a partir da conclus√£o
‚úÖ Cobre defeitos de instala√ß√£o
‚úÖ V√°lida em qualquer unidade CarGlass

üìû Central: 0800-701-9495
"""
    
    # Perguntas sobre atendimento humano
    if any(keyword in pergunta_lower for keyword in ['falar com pessoa', 'atendente', 'humano']):
        if platform == "whatsapp":
            return """
üë• Falar com nossa equipe:

üìû Central: 0800-701-9495

‚è∞ Hor√°rio:
‚Ä¢ Segunda a Sexta: 8h √†s 20h
‚Ä¢ S√°bado: 8h √†s 16h
"""
        else:
            return """
üë• Falar com nossa equipe:

üìû Central: 0800-701-9495

‚è∞ Hor√°rio:
‚Ä¢ Segunda a Sexta: 8h √†s 20h
‚Ä¢ S√°bado: 8h √†s 16h
"""
    
    # Perguntas sobre op√ß√µes de servi√ßo
    if any(keyword in pergunta_lower for keyword in ['op√ß√£o', 'op√ß√µes', 'que servi√ßos', 'posso fazer', 'oferecem']):
        return """
A CarGlass oferece diversos servi√ßos para seu ve√≠culo:

1. Troca de Parabrisa
2. Reparo de Trincas
3. Troca de Vidros Laterais
4. Troca de Vidro Traseiro
5. Calibra√ß√£o ADAS (sistemas avan√ßados de assist√™ncia ao motorista)
6. Polimento de Far√≥is
7. Reparo e Troca de Retrovisores
8. Pel√≠cula de Prote√ß√£o Solar

Qual servi√ßo voc√™ gostaria de conhecer melhor?
"""
    
    # Para perguntas sobre status - usar GPT para resposta mais humanizada
    if any(keyword in pergunta_lower for keyword in ['status', 'como est√°', 'situa√ß√£o', 'andamento', 'etapa', 'fase']):
        if config.OPENAI_API_KEY and len(config.OPENAI_API_KEY) > 10:
            try:
                import openai
                openai.api_key = config.OPENAI_API_KEY
                
                dados = cliente_info.get('dados', {})
                status_atual = dados.get('status', 'Em processamento')
                tipo_servico = dados.get('tipo_servico', 'servi√ßo')
                
                system_message = f"""
                Voc√™ √© Clara, assistente virtual da CarGlass falando com {nome}.
                
                O status atual do atendimento √©: "{status_atual}"
                Tipo de servi√ßo: {tipo_servico}
                
                IMPORTANTE: Responda como se fosse uma pessoa real explicando qual √© o status atual.
                Seja natural, amig√°vel e humana. N√£o liste etapas ou use formata√ß√£o t√©cnica.
                Explique o que o status significa de forma conversacional.
                N√ÉO use asteriscos ou formata√ß√£o markdown excessiva.
                
                Se precisar de mais detalhes, mencione nosso telefone: 0800-701-9495
                """
                
                response = openai.ChatCompletion.create(
                    model=config.OPENAI_MODEL,
                    messages=[
                        {"role": "system", "content": system_message},
                        {"role": "user", "content": f"Como est√° meu atendimento?"}
                    ],
                    max_tokens=200,
                    temperature=0.7
                )
                
                return response.choices[0].message['content'].strip()
            except Exception as e:
                logger.error(f"OpenAI erro: {e}")
        
        # Fallback humanizado para status
        dados = cliente_info.get('dados', {})
        status = dados.get('status', 'Em processamento')
        
        if platform == "whatsapp":
            if "agendado" in status.lower():
                previsao_text = f" com previs√£o para {dados.get('previsao_conclusao', '')}" if dados.get('previsao_conclusao') else ""
                return f"Oi {nome}! üòä Seu servi√ßo j√° est√° agendado{previsao_text}. Nossa equipe est√° organizando tudo para o dia marcado. Em breve voc√™ receber√° mais detalhes!"
            elif "andamento" in status.lower():
                previsao_text = f" com previs√£o de conclus√£o {dados.get('previsao_conclusao', '')}" if dados.get('previsao_conclusao') else ""
                return f"Ol√° {nome}! üîß Seu atendimento est√° em andamento{previsao_text}. Nossa equipe t√©cnica est√° trabalhando no seu ve√≠culo neste momento."
            elif "concluido" in status.lower():
                return f"Oi {nome}! ‚úÖ √ìtima not√≠cia - seu servi√ßo foi conclu√≠do com sucesso!"
            else:
                return f"Oi {nome}! üìã Seu atendimento est√° com status: {status}. Nossa equipe est√° cuidando de tudo!"
        else:
            if "agendado" in status.lower():
                previsao_text = f" com previs√£o para {dados.get('previsao_conclusao', '')}" if dados.get('previsao_conclusao') else ""
                return f"Ol√° {nome}! Seu servi√ßo j√° est√° agendado{previsao_text}. Nossa equipe est√° organizando tudo para o dia marcado."
            elif "andamento" in status.lower():
                previsao_text = f" com previs√£o de conclus√£o {dados.get('previsao_conclusao', '')}" if dados.get('previsao_conclusao') else ""
                return f"Ol√° {nome}! Seu atendimento est√° em andamento{previsao_text}. Nossa equipe t√©cnica est√° trabalhando no seu ve√≠culo."
            elif "concluido" in status.lower():
                return f"Ol√° {nome}! √ìtima not√≠cia - seu servi√ßo foi conclu√≠do com sucesso!"
            else:
                return f"Ol√° {nome}! Seu atendimento est√° com status: {status}. Nossa equipe est√° cuidando de tudo!"
    
    # Perguntas sobre etapas ou progresso
    if any(keyword in pergunta_lower for keyword in ['etapa', 'progresso', 'andamento', 'fase']):
        dados = cliente_info.get('dados', {})
        status = dados.get('status', 'Em processamento')
        
        if status == "Servi√ßo agendado com sucesso":
            return """
Seu servi√ßo foi agendado com sucesso e est√° aguardando a data marcada para execu√ß√£o.

As pr√≥ximas etapas ser√£o:
1. Abertura da ordem de servi√ßo
2. Identifica√ß√£o da pe√ßa necess√°ria
3. Execu√ß√£o do servi√ßo
4. Inspe√ß√£o de qualidade
5. Entrega do ve√≠culo
"""
        elif status == "Ordem de Servi√ßo Liberada":
            return """
Sua ordem de servi√ßo j√° foi liberada! Isso significa que j√° identificamos o servi√ßo necess√°rio e autorizamos sua execu√ß√£o.

As pr√≥ximas etapas s√£o:
1. Separa√ß√£o da pe√ßa para o servi√ßo
2. Execu√ß√£o do servi√ßo
3. Inspe√ß√£o de qualidade
4. Entrega do ve√≠culo
"""
        elif status == "Pe√ßa Identificada":
            return """
A pe√ßa necess√°ria para o seu ve√≠culo j√° foi identificada e separada em nosso estoque.

As pr√≥ximas etapas s√£o:
1. Execu√ß√£o do servi√ßo
2. Inspe√ß√£o de qualidade
3. Entrega do ve√≠culo
"""
        elif status == "Fotos Recebidas":
            return """
Recebemos as fotos do seu ve√≠culo e estamos analisando para preparar tudo para o atendimento.

As pr√≥ximas etapas s√£o:
1. Confirma√ß√£o da pe√ßa necess√°ria
2. Execu√ß√£o do servi√ßo
3. Inspe√ß√£o de qualidade
4. Entrega do ve√≠culo
"""
        elif status == "Aguardando fotos para libera√ß√£o da ordem":
            return """
Estamos aguardando as fotos do seu ve√≠culo para libera√ß√£o da ordem de servi√ßo.

Voc√™ pode enviar as fotos pelo telefone 0800-701-9495 ou pelo e-mail atendimento@carglass.com.br.

Ap√≥s recebermos as fotos, as pr√≥ximas etapas ser√£o:
1. Libera√ß√£o da ordem de servi√ßo
2. Identifica√ß√£o da pe√ßa
3. Execu√ß√£o do servi√ßo
4. Inspe√ß√£o de qualidade
5. Entrega do ve√≠culo
"""
        elif status == "Ordem de Servi√ßo Aberta":
            return """
Sua ordem de servi√ßo j√° foi aberta! Estamos nos preparando para realizar o atendimento.

As pr√≥ximas etapas s√£o:
1. Envio e an√°lise de fotos
2. Libera√ß√£o da ordem
3. Identifica√ß√£o da pe√ßa
4. Execu√ß√£o do servi√ßo
5. Inspe√ß√£o de qualidade
6. Entrega do ve√≠culo
"""
    
    # Fallback usando OpenAI ou gen√©rico para outras perguntas
    if config.OPENAI_API_KEY and len(config.OPENAI_API_KEY) > 10:
        try:
            import openai
            openai.api_key = config.OPENAI_API_KEY
            
            dados = cliente_info.get('dados', {})
            system_message = f"""
            Voc√™ √© Clara, assistente virtual da CarGlass. Cliente: {nome}
            Status: {dados.get('status', 'N/A')}
            Servi√ßo: {dados.get('tipo_servico', 'N/A')}
            
            IMPORTANTE: Responda como uma pessoa real, de forma natural e conversacional.
            Seja simp√°tica, prestativa e humana. N√£o use listas ou formata√ß√£o t√©cnica.
            N√ÉO use asteriscos duplos ou formata√ß√£o markdown excessiva.
            Mantenha um tom amig√°vel e profissional.
            
            Central: 0800-701-9495
            """
            
            response = openai.ChatCompletion.create(
                model=config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": pergunta}
                ],
                max_tokens=150,
                temperature=0.7
            )
            
            return response.choices[0].message['content'].strip()
        except Exception as e:
            logger.error(f"OpenAI erro: {e}")
    
    # Fallback gen√©rico melhorado
    if platform == "whatsapp":
        return f"Entendi sua pergunta, {nome}! üòä\n\nPara informa√ß√µes espec√≠ficas:\nüìû 0800-701-9495"
    else:
        return f"Entendi sua pergunta, {nome}. Para informa√ß√µes espec√≠ficas, entre em contato: üìû 0800-701-9495"

# ===== PROCESSAMENTO DE IDENTIFICA√á√ÉO =====
def process_identification(user_input: str, session_data: SessionData) -> str:
    """Processa identifica√ß√£o do cliente"""
    tipo, valor = detect_identifier_type(user_input)
    
    logger.info(f"üîç Processando identifica√ß√£o - Tipo: {tipo}, Valor: {valor[:4] if valor else 'None'}***")
    
    if not tipo:
        logger.info("‚ùå Tipo de identificador n√£o reconhecido")
        if session_data.platform == "whatsapp":
            return """
Por favor, forne√ßa um identificador v√°lido:

üìã CPF (11 d√≠gitos)
üì± Telefone (10 ou 11 d√≠gitos)  
üöó Placa do ve√≠culo
üî¢ N√∫mero da ordem de servi√ßo
"""
        else:
            return """
Por favor, forne√ßa um identificador v√°lido:

üìã CPF (11 d√≠gitos)
üì± Telefone (10 ou 11 d√≠gitos)
üöó Placa do ve√≠culo
üî¢ N√∫mero da ordem de servi√ßo
"""
    
    client_data = get_client_data(tipo, valor)
    logger.info(f"üìä Resultado da consulta - Sucesso: {client_data.get('sucesso')}")
    
    if not client_data.get('sucesso'):
        logger.info(f"‚ùå Cliente n√£o encontrado: {tipo} = {valor}")
        if session_data.platform == "whatsapp":
            return f"""
‚ùå N√£o encontrei informa√ß√µes com o {tipo} fornecido.

Voc√™ pode tentar:
‚Ä¢ Verificar se digitou corretamente
‚Ä¢ Usar outro identificador  
‚Ä¢ Entrar em contato: 0800-701-9495
"""
        else:
            return f"""
‚ùå N√£o encontrei informa√ß√µes com o {tipo} fornecido.

Voc√™ pode tentar:
‚Ä¢ Verificar se digitou corretamente
‚Ä¢ Usar outro identificador
‚Ä¢ Entrar em contato: üìû 0800-701-9495
"""
    
    session_data.client_identified = True
    session_data.client_info = client_data
    
    dados = client_data['dados']
    nome = dados.get('nome', 'Cliente')
    status = dados.get('status', 'Em processamento')
    ordem = dados.get('ordem', 'N/A')
    tipo_servico = dados.get('tipo_servico', 'N/A')
    veiculo = dados.get('veiculo', {})
    modelo = veiculo.get('modelo', 'N/A')
    ano = veiculo.get('ano', 'N/A')
    placa = veiculo.get('placa', 'N/A')
    
    logger.info(f"‚úÖ Cliente identificado: {nome} - Status: {status}")
    
    # Resposta conversacional humanizada - SEM tags de status visuais
    if config.OPENAI_API_KEY and len(config.OPENAI_API_KEY) > 10:
        try:
            import openai
            openai.api_key = config.OPENAI_API_KEY
            
            system_message = f"""
            Voc√™ √© Clara, assistente virtual da CarGlass, falando com {nome}.
            
            Informa√ß√µes do atendimento:
            - Ordem: {ordem}
            - Status atual: {status}
            - Servi√ßo: {tipo_servico}
            - Ve√≠culo: {modelo} ({ano})
            - Placa: {placa}
            
            IMPORTANTE: 
            1. Cumprimente o cliente pelo nome de forma natural
            2. Explique o status atual de forma conversacional e humana
            3. NUNCA mencione loja espec√≠fica - se precisar falar de local, diga apenas "nossa equipe" ou "uma de nossas unidades"
            4. Se cliente perguntar sobre loja, oriente para ligar 0800-701-9495
            5. Seja natural, como se fosse uma pessoa real falando
            6. N√ÉO use formata√ß√£o excessiva ou asteriscos duplos
            7. Inclua detalhes do ve√≠culo e ordem de forma natural na conversa
            8. Termine perguntando como pode ajudar de forma amig√°vel
            
            Mantenha um tom conversacional e amig√°vel, como se estivesse falando pessoalmente.
            """
            
            response = openai.ChatCompletion.create(
                model=config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": f"Cliente forneceu {tipo}: {valor}"}
                ],
                max_tokens=300,
                temperature=0.7
            )
            
            logger.info("‚úÖ Resposta OpenAI gerada com sucesso")
            return response.choices[0].message['content'].strip()
            
        except Exception as e:
            logger.error(f"‚ùå OpenAI erro na identifica√ß√£o: {e}")
    
    # Fallback humanizado sem OpenAI
    previsao = dados.get('previsao_conclusao', '')
    
    if session_data.platform == "whatsapp":
        if "agendado" in status.lower():
            previsao_text = f" com previs√£o para {previsao}" if previsao else ""
            return f"""
üëã Ol√° {nome}!  

Sua ordem de servi√ßo {ordem} para {tipo_servico} no seu {modelo} ({ano}), placa {placa}, est√° agendada{previsao_text}.

üè™ Nossa equipe j√° est√° organizando tudo para voc√™.

üí¨ Como posso te ajudar?
"""
        elif "andamento" in status.lower():
            previsao_text = f" com previs√£o de conclus√£o {previsao}" if previsao else ""
            return f"""
üëã Ol√° {nome}!  

Sua ordem de servi√ßo {ordem} est√° em andamento. Nossa equipe est√° trabalhando na {tipo_servico} do seu {modelo} ({ano}), placa {placa}{previsao_text}.

üîß Tudo est√° correndo bem e dentro do prazo previsto.

üí¨ Precisa de alguma informa√ß√£o espec√≠fica?
"""
        elif "conclu√≠do" in status.lower():
            return f"""
üëã Ol√° {nome}!  

‚úÖ √ìtima not√≠cia! Sua ordem {ordem} foi conclu√≠da com sucesso. A {tipo_servico} do seu {modelo} ({ano}), placa {placa}, est√° pronta.

üè™ Voc√™ pode retirar seu ve√≠culo em nossa unidade.

üí¨ Posso te ajudar com mais alguma coisa?
"""
        elif "aguardando fotos" in status.lower():
            return f"""
üëã Ol√° {nome}!  

Sua ordem {ordem} para {tipo_servico} no seu {modelo} ({ano}), placa {placa}, est√° aguardando as fotos para darmos continuidade.

üì∑ Voc√™ pode enviar pelo nosso sistema ou entrar em contato: 0800-701-9495

üí¨ Precisa de ajuda para enviar as fotos?
"""
        else:
            return f"""
üëã Ol√° {nome}!  

Encontrei sua ordem {ordem} para {tipo_servico} no seu {modelo} ({ano}), placa {placa}. No momento est√°: {status}.

üè™ Nossa equipe est√° cuidando de tudo para voc√™.

üí¨ Como posso te ajudar?
"""
    else:
        # Vers√£o web
        if "agendado" in status.lower():
            previsao_text = f" com previs√£o para {previsao}" if previsao else ""
            return f"""
üëã Ol√° {nome}! Encontrei suas informa√ß√µes.

Sua ordem de servi√ßo {ordem} para {tipo_servico} no seu {modelo} ({ano}), placa {placa}, est√° agendada{previsao_text}.

üè™ Nossa equipe j√° est√° organizando tudo para voc√™.

üí¨ Como posso te ajudar?
"""
        elif "andamento" in status.lower():
            previsao_text = f" com previs√£o de conclus√£o {previsao}" if previsao else ""
            return f"""
üëã Ol√° {nome}! Encontrei suas informa√ß√µes.

Sua ordem de servi√ßo {ordem} est√° em andamento. Nossa equipe est√° trabalhando na {tipo_servico} do seu {modelo} ({ano}), placa {placa}{previsao_text}.

üîß Tudo est√° correndo bem e dentro do prazo previsto.

üí¨ Precisa de alguma informa√ß√£o espec√≠fica?
"""
        elif "conclu√≠do" in status.lower():
            return f"""
üëã Ol√° {nome}! Encontrei suas informa√ß√µes.

‚úÖ √ìtima not√≠cia! Sua ordem {ordem} foi conclu√≠da com sucesso. A {tipo_servico} do seu {modelo} ({ano}), placa {placa}, est√° pronta.

üè™ Voc√™ pode retirar seu ve√≠culo em nossa unidade.

üí¨ Posso te ajudar com mais alguma coisa?
"""
        elif "aguardando fotos" in status.lower():
            return f"""
üëã Ol√° {nome}! Encontrei suas informa√ß√µes.

Sua ordem {ordem} para {tipo_servico} no seu {modelo} ({ano}), placa {placa}, est√° aguardando as fotos para darmos continuidade.

üì∑ Voc√™ pode enviar pelo nosso sistema ou entrar em contato: 0800-701-9495

üí¨ Precisa de ajuda para enviar as fotos?
"""
        else:
            return f"""
üëã Ol√° {nome}! Encontrei suas informa√ß√µes.

Sua ordem {ordem} para {tipo_servico} no seu {modelo} ({ano}), placa {placa}, est√° com status: {status}.

üè™ Nossa equipe est√° cuidando de tudo para voc√™.

üí¨ Como posso te ajudar?
"""

# ===== MIDDLEWARES DE SEGURAN√áA PARA HML =====

@app.before_request
def hml_security_check():
    """Verifica√ß√µes b√°sicas para HML"""
    ip = get_remote_address()
    
    # Apenas bloqueia abuse extremo
    if security_manager.is_ip_blocked(ip):
        logger.warning(f"üö´ IP bloqueado: {ip}")
        abort(429)  # Too Many Requests
    
    # Log para monitoramento
    if request.endpoint in ['send_message', 'whatsapp_webhook']:
        security_manager.log_request(ip, request.endpoint)

@app.after_request
def hml_security_headers(response):
    """Headers b√°sicos para HML"""
    # Headers m√≠nimos que n√£o quebram funcionalidade
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'SAMEORIGIN'  # Menos restritivo
    
    # Remove headers que vazam informa√ß√µes
    response.headers.pop('Server', None)
    
    return response

# ===== ROTAS FLASK =====

@app.route('/')
def index():
    try:
        session_id = session.get('session_id')
        if not session_id:
            session_data = session_manager.create_session()
            session['session_id'] = session_data.session_id
        return render_template('index.html')
    except Exception as e:
        logger.error(f"Erro na p√°gina inicial: {e}")
        return render_template('index.html'), 500

@app.route('/get_messages')
def get_messages():
    try:
        session_id = session.get('session_id')
        if not session_id:
            session_data = session_manager.create_session()
            session['session_id'] = session_data.session_id
        else:
            session_data = session_manager.get_session(session_id)
            if not session_data:
                session_data = session_manager.create_session()
                session['session_id'] = session_data.session_id
        
        return jsonify({"messages": session_data.messages})
    except Exception as e:
        logger.error(f"Erro ao recuperar mensagens: {e}")
        return jsonify({
            "messages": [{
                "role": "assistant",
                "content": "Ol√°! Sou Clara, sua assistente virtual da CarGlass. Digite seu CPF, telefone ou placa do ve√≠culo para come√ßarmos.",
                "time": get_current_time()
            }]
        })

@app.route('/send_message', methods=['POST'])
@limiter.limit("30 per minute")  # Mais permissivo para testes
def send_message():
    """Vers√£o para homologa√ß√£o"""
    try:
        ip = get_remote_address()
        
        # Sanitiza√ß√£o b√°sica
        user_input = sanitize_input(request.form.get('message', ''))
        
        if not user_input:
            return jsonify({'error': 'Mensagem vazia'}), 400
        
        logger.info(f"üì® Mensagem HML de {ip[:8]}***: {user_input[:50]}...")
        
        # L√≥gica original mantida
        session_id = session.get('session_id')
        session_data = session_manager.get_session(session_id)
        
        if not session_data:
            session_data = session_manager.create_session()
            session['session_id'] = session_data.session_id
        
        session_data.add_message("user", user_input)
        
        if not session_data.client_identified:
            response = process_identification(user_input, session_data)
        else:
            response = get_ai_response(user_input, session_data.client_info, session_data.platform)
        
        session_data.add_message("assistant", response)
        
        return jsonify({'messages': session_data.messages})
        
    except Exception as e:
        logger.error(f"Erro HML send_message: {e}")
        logger.error(traceback.format_exc())
        return jsonify({'error': 'Erro interno'}), 500

@app.route('/whatsapp/webhook', methods=['POST'])
@limiter.limit("60 per minute")  # Mais permissivo para testes
def whatsapp_webhook():
    """Webhook WhatsApp para homologa√ß√£o"""
    ip = get_remote_address()
    
    if not twilio_handler.is_enabled():
        return "Twilio not configured", 400
    
    # VALIDA√á√ÉO CR√çTICA (mesmo em HML)
    if not security_manager.validate_twilio_webhook(request):
        logger.error(f"üö® Webhook Twilio inv√°lido de {ip}")
        abort(403)
    
    try:
        # L√≥gica original mantida
        message_data = twilio_handler.process_incoming_message(request.form)
        
        if not message_data:
            return "Bad request", 400
        
        phone = message_data['phone']
        message_text = sanitize_input(message_data['message'])
        
        logger.info(f"üì± WhatsApp HML de {phone[:6]}***: {message_text[:30]}...")
        
        session_data = session_manager.get_whatsapp_session(phone)
        
        if message_text.lower() in ['reiniciar', 'reset', 'nova consulta']:
            if session_data.session_id in session_manager.sessions:
                session_manager._remove_session(session_data.session_id)
            session_data = session_manager.create_session("whatsapp", phone)
            response = "üîÑ Consulta reiniciada!\n\nDigite seu CPF, telefone ou placa do ve√≠culo."
        else:
            session_data.add_message("user", message_text)
            
            if not session_data.client_identified:
                response = process_identification(message_text, session_data)
            else:
                response = get_ai_response(message_text, session_data.client_info, "whatsapp")
            
            session_data.add_message("assistant", response)
        
        formatted_response = format_for_whatsapp(response)
        success = twilio_handler.send_message(phone, formatted_response)
        
        return twilio_handler.create_twiml_response(), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erro webhook WhatsApp HML: {e}")
        logger.error(traceback.format_exc())
        return "Internal error", 500

@app.route('/reset', methods=['POST'])
def reset():
    try:
        session_id = session.get('session_id')
        if session_id and session_id in session_manager.sessions:
            session_manager._remove_session(session_id)
        
        session_data = session_manager.create_session()
        session['session_id'] = session_data.session_id
        
        return jsonify({'messages': session_data.messages})
    except Exception as e:
        logger.error(f"Erro ao reiniciar: {e}")
        return jsonify({'error': 'Erro ao reiniciar'}), 500

@app.route('/test_openai')
def test_openai():
    """Endpoint para testar configura√ß√£o OpenAI"""
    if not config.OPENAI_API_KEY:
        return jsonify({
            "status": "error",
            "message": "OPENAI_API_KEY n√£o configurada"
        })
    
    if len(config.OPENAI_API_KEY) < 10:
        return jsonify({
            "status": "error",  
            "message": f"OPENAI_API_KEY parece inv√°lida (muito curta): {config.OPENAI_API_KEY[:10]}..."
        })
    
    try:
        import openai
        openai.api_key = config.OPENAI_API_KEY
        
        # Teste simples da API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # Modelo mais barato para teste
            messages=[
                {"role": "user", "content": "Responda apenas 'OK' se voc√™ est√° funcionando"}
            ],
            max_tokens=10,
            temperature=0
        )
        
        return jsonify({
            "status": "success",
            "message": "OpenAI configurada corretamente",
            "response": response.choices[0].message['content'],
            "model": config.OPENAI_MODEL
        })
        
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"Erro ao testar OpenAI: {str(e)}",
            "key_preview": config.OPENAI_API_KEY[:20] + "..." if len(config.OPENAI_API_KEY) > 20 else config.OPENAI_API_KEY
        })

@app.route('/health')
def health_check():
    """Endpoint para verifica√ß√£o de sa√∫de da aplica√ß√£o"""
    try:
        # Cleanup peri√≥dico
        cache.cleanup_expired()
        session_manager._cleanup_expired()
        
        stats = session_manager.get_stats()
        
        return jsonify({
            "status": "healthy",
            "timestamp": get_current_time(),
            "sessions": stats,
            "cache_items": len(cache.cache),
            "twilio_enabled": twilio_handler.is_enabled(),
            "config": {
                "use_real_api": config.USE_REAL_API,
                "openai_configured": bool(config.OPENAI_API_KEY),
                "openai_key_length": len(config.OPENAI_API_KEY) if config.OPENAI_API_KEY else 0,
                "openai_model": config.OPENAI_MODEL,
                "session_timeout": config.SESSION_TIMEOUT,
                "cache_ttl": config.CACHE_TTL
            },
            "version": "2.1"
        })
    except Exception as e:
        logger.error(f"Erro no health check: {e}")
        return jsonify({
            "status": "error",
            "message": str(e),
            "timestamp": get_current_time()
        }), 500

@app.route('/whatsapp/status')
def whatsapp_status():
    """Endpoint para verificar status do WhatsApp"""
    if not twilio_handler.is_enabled():
        return jsonify({
            "enabled": False,
            "error": "Twilio n√£o configurado - verifique TWILIO_ACCOUNT_SID e TWILIO_AUTH_TOKEN"
        }), 400
    
    return jsonify({
        "enabled": True,
        "whatsapp_number": config.TWILIO_WHATSAPP_NUMBER,
        "active_sessions": len([s for s in session_manager.sessions.values() if s.platform == "whatsapp"]),
        "webhook_url": request.url_root + "whatsapp/webhook"
    })

# ===== ENDPOINTS √öTEIS PARA HML =====

@app.route('/hml/status')
def hml_status():
    """Status espec√≠fico para homologa√ß√£o"""
    return jsonify({
        "environment": "HOMOLOGA√á√ÉO",
        "security_level": "B√ÅSICO",
        "data_type": "MOCK/TESTE",
        "validations": {
            "twilio_webhook": config.TWILIO_AUTH_TOKEN is not None,
            "rate_limiting": True,
            "input_sanitization": True,
            "ip_blocking": len(security_manager.blocked_ips)
        },
        "request_stats": {
            "monitored_ips": len(security_manager.request_counts),
            "blocked_ips": len(security_manager.blocked_ips)
        },
        "recommendations": [
            "‚úÖ Ambiente adequado para testes",
            "‚ö†Ô∏è N√£o usar dados reais",
            "üîÑ Aplicar seguran√ßa completa antes da produ√ß√£o"
        ]
    })

@app.route('/hml/security-test')
def security_test():
    """Endpoint para testar valida√ß√µes"""
    test_results = {
        "input_sanitization": False,
        "rate_limiting": False,
        "twilio_validation": False
    }
    
    # Teste sanitiza√ß√£o
    malicious_input = "<script>alert('xss')</script>Test"
    sanitized = sanitize_input(malicious_input)
    test_results["input_sanitization"] = "<script>" not in sanitized
    
    # Teste Twilio (se configurado)
    if config.TWILIO_AUTH_TOKEN:
        test_results["twilio_validation"] = True
    
    # Rate limiting est√° ativo se chegou aqui
    test_results["rate_limiting"] = True
    
    return jsonify({
        "environment": "HML",
        "security_tests": test_results,
        "status": "‚úÖ Valida√ß√µes b√°sicas funcionando"
    })

@app.route('/debug/sessions')
def debug_sessions():
    """Endpoint para debug das sess√µes (apenas em modo DEBUG)"""
    if not config.DEBUG:
        return jsonify({"error": "Debug mode not enabled"}), 403
    
    try:
        sessions_info = []
        for session_id, session_data in session_manager.sessions.items():
            sessions_info.append({
                "session_id": session_id[:8] + "***",
                "platform": session_data.platform,
                "client_identified": session_data.client_identified,
                "messages_count": len(session_data.messages),
                "created_at": time.strftime("%H:%M:%S", time.localtime(session_data.created_at)),
                "last_activity": time.strftime("%H:%M:%S", time.localtime(session_data.last_activity)),
                "phone_number": session_data.phone_number[:4] + "***" if session_data.phone_number else None
            })
        
        return jsonify({
            "total_sessions": len(sessions_info),
            "sessions": sessions_info,
            "whatsapp_mappings": len(session_manager.whatsapp_sessions)
        })
    except Exception as e:
        logger.error(f"Erro no debug sessions: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/debug/cache')
def debug_cache():
    """Endpoint para debug do cache (apenas em modo DEBUG)"""
    if not config.DEBUG:
        return jsonify({"error": "Debug mode not enabled"}), 403
    
    try:
        cache_info = {}
        current_time = time.time()
        
        for key, item in cache.cache.items():
            cache_info[key] = {
                "expires_in": max(0, int(item['expires'] - current_time)),
                "size": len(str(item['value']))
            }
        
        return jsonify({
            "cache_size": len(cache.cache),
            "max_items": cache.max_items,
            "items": cache_info
        })
    except Exception as e:
        logger.error(f"Erro no debug cache: {e}")
        return jsonify({"error": str(e)}), 500

# ===== TRATAMENTO DE ERROS =====
@app.errorhandler(404)
def not_found(error):
    logger.warning(f"404 - P√°gina n√£o encontrada: {request.url}")
    return jsonify({'error': 'Endpoint n√£o encontrado'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Erro interno: {error}")
    logger.error(traceback.format_exc())
    return jsonify({'error': 'Erro interno do servidor'}), 500

@app.errorhandler(Exception)
def handle_exception(e):
    logger.error(f"Exce√ß√£o n√£o tratada: {e}")
    logger.error(traceback.format_exc())
    return jsonify({'error': 'Erro interno do servidor'}), 500

# ===== INICIALIZA√á√ÉO =====
def initialize_app():
    """Inicializa componentes da aplica√ß√£o"""
    logger.info("üîß Inicializando componentes da aplica√ß√£o...")
    
    # Cleanup inicial
    cache.cleanup_expired()
    session_manager._cleanup_expired()
    
    # Testa configura√ß√µes
    if config.OPENAI_API_KEY:
        logger.info("‚úÖ OpenAI API Key configurada")
    else:
        logger.warning("‚ö†Ô∏è OpenAI API Key n√£o configurada - usando fallbacks")
    
    if twilio_handler.is_enabled():
        logger.info("‚úÖ Twilio WhatsApp habilitado")
    else:
        logger.warning("‚ö†Ô∏è Twilio WhatsApp desabilitado")
    
    logger.info("‚úÖ Aplica√ß√£o inicializada com sucesso")

if __name__ == '__main__':
    logger.info("üöÄ CarGlass Assistant v2.1 + Twilio WhatsApp iniciando...")
    logger.info(f"Modo API: {'REAL' if config.USE_REAL_API else 'SIMULA√á√ÉO'}")
    logger.info(f"OpenAI: {'CONFIGURADO' if config.OPENAI_API_KEY else 'FALLBACK'}")
    logger.info(f"Twilio WhatsApp: {'HABILITADO' if twilio_handler.is_enabled() else 'DESABILITADO'}")
    logger.info(f"Debug Mode: {'HABILITADO' if config.DEBUG else 'DESABILITADO'}")
    
    if twilio_handler.is_enabled():
        logger.info(f"üì± WhatsApp n√∫mero: {config.TWILIO_WHATSAPP_NUMBER}")
        logger.info(f"üîó Webhook URL: http://localhost:5000/whatsapp/webhook (configure no Twilio)")
    else:
        logger.warning("‚ö†Ô∏è Para habilitar WhatsApp, configure as vari√°veis:")
        logger.warning("    TWILIO_ACCOUNT_SID=ACxxxxx")
        logger.warning("    TWILIO_AUTH_TOKEN=xxxxx")
        logger.warning("    TWILIO_WHATSAPP_NUMBER=whatsapp:+14155238886")
    
    # Inicializa componentes
    initialize_app()
    
    # Inicia aplica√ß√£o
    app.run(debug=config.DEBUG, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
